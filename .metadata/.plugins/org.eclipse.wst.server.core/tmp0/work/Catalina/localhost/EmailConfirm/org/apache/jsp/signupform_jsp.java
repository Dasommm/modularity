/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.30
 * Generated at: 2020-04-01 06:03:15 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class signupform_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');
 request.setCharacterEncoding("UTF-8");
      out.write('\r');
      out.write('\n');
 response.setContentType("text/html; charset=UTF-8");
      out.write("  \r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"https://code.jquery.com/jquery-3.4.1.min.js\"></script>\r\n");
	
	String authNum = (String)session.getAttribute("authNum");  		//인증번호
	String mem_email = (String)session.getAttribute("mem_email");	//이메일
	String emailNotTobe = request.getParameter("emailNotTobe");		//(로직구현시)이메일 중복여부

      out.write("\t\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("// 이메일 인증 (버튼으로 할 경우 이 부분을 살린다.)\r\n");
      out.write("/* function echeckFun(){\r\n");
      out.write("\tif($(\"#mem_email\").val()==\"\"){\r\n");
      out.write("\t\talert(\"이메일을 입력해주세요\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}else{\r\n");
      out.write("\t\t$(\"input[name='command']\").val(\"emailChk\");\r\n");
      out.write("\t\t$(\"form\").submit();\r\n");
      out.write("\t}\r\n");
      out.write("} */\r\n");
      out.write("//인증 번호 확인 클릭시 '인증번호 창' 생성\r\n");
      out.write("function authNumcheck(){\r\n");
      out.write("\tvar inputauthNum = document.getElementById(\"InputauthNum\").value;\r\n");
      out.write("\tif(\"");
      out.print(authNum);
      out.write("\"==inputauthNum){\r\n");
      out.write("\t$(\"#emailconfirmmsg\").css(\"display\", \"block\"); \t//인증화면에 보이게 \r\n");
      out.write("\t$(\"#eCheck_Display\").css(\"display\", \"none\"); \t//인증화면에 안보이게 \r\n");
      out.write("\t$(\"#emailchk\").css(\"display\", \"none\"); \t\t\t//이메일 인증버튼 안보이게(평소) \r\n");
      out.write("\tdocument.getElementById(\"InputauthNum\").title = 'y';  //인증번호 입력태그의 title('n'->'y')로 변경\r\n");
      out.write("\t}else{\r\n");
      out.write("\t\talert(\"인증메일에서 버튼클릭후 진행해주세요.\");\r\n");
      out.write("\t}\t\r\n");
      out.write("}\r\n");
      out.write("$(function(){\r\n");
      out.write("\tif(\"");
      out.print(emailNotTobe);
      out.write("\"==\"false\"){\r\n");
      out.write("\t\t$(\"#eJung_Display\").css(\"display\", \"block\"); //이메일중복인지\r\n");
      out.write("\t}else if(\"");
      out.print(emailNotTobe);
      out.write("\"==\"true\"){\r\n");
      out.write("\t\t$(\"#eCheck_Display\").css(\"display\", \"block\"); //인증번호입력란 화면에 보이게 \r\n");
      out.write("\t\talert(\"이메일에서 인증번호를 확인해 주세요\");\r\n");
      out.write("\t}\r\n");
      out.write("\t//자동으로 인증번호 입력되게 하는 조건문\r\n");
      out.write("\tif(\"");
      out.print(authNum);
      out.write("\"!=\"null\"){\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t$(\"#eCheck_Display\").show();\r\n");
      out.write("\t\t$(\"#InputauthNum\").val(\"");
      out.print(authNum);
      out.write("\");\r\n");
      out.write("\t\t$(\"#mem_email\").val(\"");
      out.print(mem_email);
      out.write("\");\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<br>\r\n");
      out.write("<section>\r\n");
      out.write("<div id=\"loginform\">\r\n");
      out.write("  <form action=\"signup.do\" method=\"post\">\r\n");
      out.write("  <input type=\"hidden\" name=\"command\" value=\"emailChk\"/>\r\n");
      out.write("  \t<!-- 이메일 입력칸 -->\r\n");
      out.write("  \t<a class=\"atag\">Email: </a><input type=\"email\" value=\"\" name=\"mem_email\" id=\"mem_email\" required=\"required\"/>\r\n");
      out.write("  \t\r\n");
      out.write("  \t<!-- 이메일인증 버튼 -->\r\n");
      out.write("  \t<input type=\"submit\" id=\"emailchk\" value=\"이메일인증\" style=\"background:black; width:200px; border-radius: 10px; color:white; font-weight:bold;\"/>\r\n");
      out.write("  \t<!-- form-submit 버튼 새로 만들면 => <input type=\"button\" id=\"emailchk\" onclick=\"echeckFun();\" value=\"이메일인증\" style=\"background:black; width:200px; border-radius: 10px; color:white; font-weight:bold;\"/>-->\r\n");
      out.write("  \t\r\n");
      out.write("  \t<!-- 이메일에서 인증버튼 누르고 인증번호 입력 창 뜨는 부분 -->\r\n");
      out.write("\t<a id=\"eJung_Display\" style=\"color:red; display:none;\">이미 존재하는 이메일입니다</a>\r\n");
      out.write("\t<div id=\"eCheck_Display\" style=\"display:none;\">\r\n");
      out.write("\t\t<span>인증번호 입력:</span> <input type=\"text\" id=\"InputauthNum\" title=\"n\" value=\"\" style=\"width: 230px;\"/>\r\n");
      out.write("\t\t<input type=\"button\" id=\"btn\" onclick=\"authNumcheck();\" value=\"확인\" style=\"background:black; width:100px; border-radius: 10px; color:white; font-weight:bold;\"/>\r\n");
      out.write("\t\t<input type=\"button\" id=\"ReSend\" onclick=\"echeckFun();\" value=\"재전송\" style=\"background:black; width:100px; border-radius: 10px; color:white; font-weight:bold;\"/> \r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("\t<!-- 메일 인증 완료 표시 -->\r\n");
      out.write("\t<a id=\"emailconfirmmsg\" style=\"color:blue; display:none; margin-left: -20px; font-size: 20px;font-weight: bold;\">이메일 인증 완료</a>\r\n");
      out.write("</form>\r\n");
      out.write("</div>\r\n");
      out.write("</section>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
